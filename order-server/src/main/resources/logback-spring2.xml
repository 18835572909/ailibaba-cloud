<?xml version="1.0" encoding="UTF-8"?>

<configuration scan="true">
    <property name="LOG_HOME" value="z-logs/"/>
    <springProperty scope="context" name="appName" source="spring.application.name"/>
    <springProperty scope="context" name="graylog.host" source="graylog.host"/>
    <springProperty scope="context" name="graylog.port" source="graylog.port"/>

    <logger name="com.alibaba.nacos" level="OFF"/>

    <!-- ConsoleAppender：把日志输出到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d %highlight(%-5level) | %boldYellow(%thread) | %boldMagenta(%logger{20})(%file:%line\)- %m%n
            </pattern>
            <!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--
    以下的大概意思是：
        1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是sys.log
        2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名
     -->
    <appender name="applog"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${LOG_HOME}/order.log</File>
        <!--
            rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。
            TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
            <!-- 文件名：log/sys.2017-12-05.0.log -->
            <fileNamePattern>${LOG_HOME}/order.%d.%i.log</fileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <!-- pattern节点，用来设置日志的输入格式 -->
            <pattern>
                [%date{yyyy-MM-dd HH:mm:ss}] [%-5level] |%thread| [%logger:%line] --%mdc{client} %msg%n
            </pattern>
            <!-- 记录日志的编码 -->
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
    </appender>

    <!-- 控制台输出日志级别 -->
    <root level="info">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="applog"/>
    </root>

</configuration>