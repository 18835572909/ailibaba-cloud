#分库分表中间件：sharding-jdbc

## 分布式主键id生成策略
1. UUID
2. 雪花算法：SnowFlake
  0    : 符号位
  1-41 : 41位时间序列（当前时间戳-开始时间戳）
  42-51: 10位的机器标识（5位的IDC+5位的machine）
  52-63: 12位的计数序列号
3. redis.incr
4. 额外使用一张自增主键的单表
5. zookeeper

## 易错位置
1. 分库分表配置策略

2. druid监控不到sql

3. 不能打印携带参数sql

2021.07.23
## 曾经使用过得自定义分库分表策略
路由查找过程：
1. 路由父表：route_parent (记录分表类型)
2. 路由子表：route_child (路由子表)
3. 路由信息表： route_table (记录分库分表信息)
  - eg: order_two_000002
    - 2库中查找route_parent_id = 2的路由子表记录
    - 取路由子表记录的主键id生成6位分表后缀 route_child_id=51 => order_000051

路由实现过程：
1. 创建需要分库分表的模板表order_
2. 初始化需要分类的分表路由信息入route_parent
  - eg: pid=1、type=1、count=0、created=now()、updated=now()
3. 同时插入路由子表记录route_child
  - eg: cid=1、pid=1
4. 单独起线程轮询检测子表数量：
  - 当分表记录数量>=500w : 新增子表记录cid=2、pid=1
  - 当子表记录中同一个type的数量>10 : 新路由父表记录pid = 2,type=1
  - 使用redis记录每种type表的最后路由记录。目的是方便新增记录及时确定插入位置。eg: order_000002

注意或者缺点：(以下部分先后顺序)
1. 分页排序
2. 记录查询
3. 子表记录数：
  - 不要使用: count
  - 使用: select table_rows from information_schema.tables where table_name = 'config_info';
4. 由于子表新增不在主线程插入时及时判断，导致出现子表数量>500w的情况
5. 关联查询：（常见组合，要将常见组合想法处理，避免关联是无用表关联）


原理及优点：（如何优化常见的分库分表查询问题？）
1. 同一分片的表之间关联可以避免笛卡尔积
eg: 使用分片键的作为查询条件时候，先检测分片键所在分表中，再遍历分库。
这样，避免了笛卡尔积的情况。

2. 强制路由分片
eg: 当sql中没有分片键，但业务上可以取到，需要在执行之前根据业务获取分片键对应的数据节点集合。
problem： 怎么让业务的结果让sharding-jdbc知道？





